{
	"info": {
		"_postman_id": "35e6bee6-1572-4621-a404-b646c653df84",
		"name": "GraphQL API testcase",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31789780"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"    if (pm.response.code === 200) {",
							"        pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
							"    }",
							"});",
							"pm.test(\"Verify response headers\", function () {",
							"    pm.response.to.have.header('Set-Cookie');",
							"});",
							"pm.test(\"Verify Set-Cookie header has access_token\", function () {",
							"    pm.expect(pm.response.headers.get('Set-Cookie')).to.include('access_token=');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "password",
							"value": "qwertyu",
							"type": "text"
						},
						{
							"key": "email",
							"value": "adaad@gmail.com",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"    if (pm.response.code === 200) {",
							"        pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;",
							"    }",
							"});",
							"pm.test(\"Verify response headers\", function () {",
							"    pm.response.to.have.header('Set-Cookie');",
							"});",
							"pm.test(\"Verify Set-Cookie header has access_token\", function () {",
							"    pm.expect(pm.response.headers.get('Set-Cookie')).to.include('access_token=');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "adaad@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwertyu",
							"type": "text"
						},
						{
							"key": "username",
							"value": "aasdasdas",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "create-project",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  createProject (language:\"Python\", name:\"some new project\") {\r\n    project\r\n    {\r\n        name\r\n        language\r\n        projectId\r\n    }\r\n  }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{graph_url}}",
					"host": [
						"{{graph_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "project-delete",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  deleteProject (projectId: 8) {\r\n    success\r\n  }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{graph_url}}",
					"host": [
						"{{graph_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "user-projects",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n  myProjects{\r\n    projectId\r\n    code\r\n  }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{graph_url}}",
					"host": [
						"{{graph_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "rename-project",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  renameProject(name:\"new name yey\", projectId: 5){\r\n    project{\r\n        name\r\n        projectId\r\n        author\r\n        {   id}\r\n        code\r\n    }\r\n  }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{graph_url}}",
					"host": [
						"{{graph_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "project",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n  project(projectId: 5) {\r\n      projectId\r\n      name\r\n      language\r\n    }\r\n  }",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{graph_url}}",
					"host": [
						"{{graph_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "project-execute",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  executeCode(code:\"print('1111'*3)\", projectId: 5){\r\n    stdout\r\n    error\r\n  }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{graph_url}}",
					"host": [
						"{{graph_url}}"
					]
				}
			},
			"response": []
		}
	]
}